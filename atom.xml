<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LearningSpace</title>
  
  <subtitle>leveysama</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://stomachache.vip/"/>
  <updated>2020-03-25T12:31:02.894Z</updated>
  <id>http://stomachache.vip/</id>
  
  <author>
    <name>LeveySama</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次jvm调优</title>
    <link href="http://stomachache.vip/learn/jvm-md/"/>
    <id>http://stomachache.vip/learn/jvm-md/</id>
    <published>2020-03-25T12:29:54.000Z</published>
    <updated>2020-03-25T12:31:02.894Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Netty入门学习</title>
    <link href="http://stomachache.vip/learn/netty01/"/>
    <id>http://stomachache.vip/learn/netty01/</id>
    <published>2019-07-18T08:32:26.000Z</published>
    <updated>2020-03-25T15:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务端启动代码"><a href="#服务端启动代码" class="headerlink" title="服务端启动代码"></a>服务端启动代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">handler</span>(<span class="title">new</span> <span class="title">SimpleServerHandler</span>())</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture f = b.bind(<span class="number">80</span>).sync();</span><br><span class="line"></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"channelActive"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"channelRegistered"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"handlerAdded"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Netty组件认识"><a href="#Netty组件认识" class="headerlink" title="Netty组件认识"></a>Netty组件认识</h3><h4 id="1、Bootstrap"><a href="#1、Bootstrap" class="headerlink" title="1、Bootstrap"></a>1、Bootstrap</h4><p>引导类负责引导Netty，设置参数配置。引导过程包括启动线程、打开套接字等。</p><h4 id="2、EventLoopGroup"><a href="#2、EventLoopGroup" class="headerlink" title="2、EventLoopGroup"></a>2、EventLoopGroup</h4><p>EventLoopGroup是EventLoop组。负责管理EventLoop，通过轮询方式分配一个EventLoop。</p><h4 id="3、EventLoop"><a href="#3、EventLoop" class="headerlink" title="3、EventLoop"></a>3、EventLoop</h4><p>EventLoop是一个不断寻找新事件的任务，例如来自网络套接字(来自SocketChannel)实例的传入数据。当事件发生时，事件被传递给适当的事件处理程序，例如ChannelHandler。</p><h4 id="4、SocketChannel"><a href="#4、SocketChannel" class="headerlink" title="4、SocketChannel"></a>4、SocketChannel</h4><p>SocketChannel表示通过网络连接到另一台计算机的TCP连接。无论使用Netty作为客户机还是服务器，与网络上其他计算机交换的所有数据都通过一个SocketChannel实例传递，该实例表示计算机之间的TCP连接。</p><p>SocektChannel由一个EventLoop管理，并且始终只由同一个EventLoop管理。因为EventLoop总是由同一个线程执行，所以SocketChannel实例也只能由同一个线程访问。因此，在从套接字通道读取数据时，不必担心同步问题。</p><h4 id="5、ChannelInitializer"><a href="#5、ChannelInitializer" class="headerlink" title="5、ChannelInitializer"></a>5、ChannelInitializer</h4><p>Netty通道初始化器是一种特殊的通道处理程序，它在创建SocketChannel时附加到SocketChannel的ChannelPipeline上。然后调用ChannelInitializer，以便它可以初始化SocketChannel。</p><p>在初始化SocketChannel之后，ChannelInitializer将自己从ChannelPipeline中移除。</p><h4 id="6、ChannelPipeLine"><a href="#6、ChannelPipeLine" class="headerlink" title="6、ChannelPipeLine"></a>6、ChannelPipeLine</h4><p>每个Netty套接字通道都有一个通道管道。ChannelPipeline包含ChannelHandler实例的列表。当EventLoop从SocketChannel读取数据时，数据被传递给ChannelPipeline中的第一个ChannelHandler。第一个ChannelHandler处理数据，可以选择将数据转发给ChannelPipeline中的下一个ChannelHandler，下一个ChannelHandler也处理数据，可以选择将数据转发给ChannelPipeline中的下一个ChannelHandler等。</p><p>当将数据写入SocketChannel时，写入的数据在最终写入SocketChannel之前也会通过ChannelPipeline传递。</p><h4 id="7、ChannelHandler"><a href="#7、ChannelHandler" class="headerlink" title="7、ChannelHandler"></a>7、ChannelHandler</h4><p>ChannelHandler处理从Netty SocketChannel接收的数据。ChannelHandler还可以处理被写入SocketChannel的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务端启动代码&quot;&gt;&lt;a href=&quot;#服务端启动代码&quot; class=&quot;headerlink&quot; title=&quot;服务端启动代码&quot;&gt;&lt;/a&gt;服务端启动代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>NIO多路复用学习笔记</title>
    <link href="http://stomachache.vip/learn/nio/"/>
    <id>http://stomachache.vip/learn/nio/</id>
    <published>2019-07-13T12:46:25.000Z</published>
    <updated>2020-03-25T14:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-O多路复用技术"><a href="#I-O多路复用技术" class="headerlink" title="I/O多路复用技术"></a>I/O多路复用技术</h3><p>在I/O编程过程中，当需要同时处理多个客户端接入请求时，可以利用多线程或者I/O多路复用技术进行处理。I/O多路复用技术通过把多个I/O的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。与传统的多线程/多进程模型相比，I/O多路复用技术的最大优势是系统开销小，系统不需要创建新的额外进程或线程，也不需要维护这些进程和线程的运行，降低了系统的维护工作量，节省了系统资源，I/O多路复用的主要应用场景如下：</p><p>服务器需要同时处理多个处于监听状态或者多个连接状态的套接字；<br>服务器需要同时处理多种网络协议的套接字；<br>目前支持I/O多路复用的系统调用有select、pselect、 poll、epoll，在Linux网络编程过程中，很长一段时间都使用select做轮询和网络事件通知，然而select的一些固有缺陷导致了它的应用受到了很大的限制，最终Linux不得不在新的内核版本中寻找select的替代方案，最终选择了epoll。epoll与select的原理比较类似，为了克服select的缺点，epoll做了很多重大改进，总结如下：</p><p>支持一个进程打开的socket描述符（FD）不受限制（仅受限于操作系统的最大文件句柄数）。<br>I/O效率不会随着FD数量的增加而线性下降。<br>传统select/poll的另一个致命弱点，就是当你拥有一个很大的socket集合时，由于网络延时或者链路空闲，任意时刻只有少部分的socket是“活跃”的，但是select/poll每次调用都会线性扫描全部的集合，导致效率呈线性下降。epoll不存在这个问题，它只会对“活跃”的socket进行操作——这是因为在内核的实现中，epoll是根据每个fd上面的callback函数实现的。那么只有“活跃”的socket才会去主动调用callback函数，其他<br>idle状态的socket则不会。在这点上，epoll实现了一个伪AIO。<br>使用mmap加速内核与用户空间的消息传递。<br>epoll的API更加简单。<br>Java I/O演进之路<br>从JDK1.0到JDK1.3，Java I/O类库都非常原始，很多UNIX网络编程中的概念或者接口在I/O类库中都没有体现，例如Pipe、Channel、Buffer和Selector等。在2002年发布JDK1.4时，NIO以JSR-51的身份正式随JDK发布。它新增了java.nio包，提供了很多进行异步I/O开发的API和类库，主要的类和接口如下：</p><ol><li>进行异步I/O操作的缓冲区ByteBuffer等；</li><li>进行异步I/O操作的管道Pipe；</li><li>进行各种I/O操作的（同步或异步）的Chanel，包括ServerSocketChanel和SocketChanel；</li><li>多种字符集的编码能力和解码能力；</li><li>实现非阻塞I/O操作的多路复用器Selector；</li><li>文件通道FileChanel；</li><li>新的NIO类库的提供，极大的促进了基于Java的异步非阻塞编程的应用和发展，但是，它依然有不完善的地方，特别是对文件系统的处理能力仍显不足，主要问题如下：</li></ol><p>没有统一的文件属性（例如读写权限）；<br>API能力较弱，例如目录的级联创建和递归遍历，往往需要自己实现；<br>底层存储系统的一些高级API无法使用；<br>所有的文件操作都是同步阻塞调用，不支持异步文件读写操作。<br>2011年7月28日，JDK7正式发布。它的一个比较大的亮点就是将原来的NIO类库进行了升级，被称为NIO 2.0。NIO 2.0由JSR-203演进而来，它主要提供了如下三个方面的改进：</p><p>提供能够批量获取文件属性的API，这些API具有平台无关性，不与特定的文件系统相耦合。另外，它还提供了标准文件的SPI，供各个服务提供商扩展实现；<br>提供AIO功能，支持基于文件的异步I/O操作和针对网络套接字的异步操作；<br>完成JSR-51定义的通道功能，包括对配置和多播的数据报的支持等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;I-O多路复用技术&quot;&gt;&lt;a href=&quot;#I-O多路复用技术&quot; class=&quot;headerlink&quot; title=&quot;I/O多路复用技术&quot;&gt;&lt;/a&gt;I/O多路复用技术&lt;/h3&gt;&lt;p&gt;在I/O编程过程中，当需要同时处理多个客户端接入请求时，可以利用多线程或者I/O多路
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
